@page "/administration"
@inject UserManager<IdentityUser> _UserManager
@inject school.Data.ApplicationDbContext _context
@attribute [Authorize(Roles = "Admin")]

<MudTabs Outlined="true">
    <MudTabPanel Text="Account management" Icon="@Icons.Material.Filled.SupervisorAccount">
        <MudTabs Elevation="25" Centered="true" Rounded="true" class="mb-5">
            <MudTabPanel Text="Users" OnClick="@(e => Active("user"))" />
            <MudTabPanel Text="Admins" OnClick="@(e => Active("admin"))" />
        </MudTabs>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<IdentityUser>>>(ServerReload))" @ref="table" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>E-mail</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="E-mail">@context.UserName</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(e => OpenEditPage(context.Id))"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Site management" Icon="@Icons.Material.Filled.Build">
        <SiteManagement/>
    </MudTabPanel>
    <MudTabPanel Text="Diagnostics" Icon="@Icons.Material.Filled.BarChart">
        <Diagnostics/>
    </MudTabPanel>
</MudTabs>



@code {

    public MudTable<IdentityUser> table;

    public string activeResults { get; set; } = "user";

    // load only user accounts from database
    private async Task<TableData<IdentityUser>> ServerReload(TableState state)
    {
        var userRoles = await _context.UserRoles.Where(x => x.RoleId == activeResults).ToListAsync();

        var results = new List<IdentityUser>();

        foreach (var item in userRoles)
        {
            var user = await _UserManager.Users.Where(x => x.Id == item.UserId).FirstOrDefaultAsync();
            results.Add(user);
        }

        StateHasChanged();
        return new TableData<IdentityUser>() { Items = results };
    }

    private void OpenEditPage(string id)
    {
        NavigationManager.NavigateTo($"/administration/edit/{id}");
    }

    public void Active(string s)
    {
        activeResults = s;
        table.ReloadServerData();
    }

}
