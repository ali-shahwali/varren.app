@inject school.Data.ApplicationDbContext _context

@if (table == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}

<MudTable ServerData="@(new Func<TableState, Task<TableData<Event>>>(ServerReload))" @ref="table" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Tid</MudTh>
        <MudTh>Typ</MudTh>
        <MudTh>Att göra</MudTh>
        <MudTh>Status</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Tid">@string.Format("{0:00}:{1:00}", context.Time.Value.Hours, context.Time.Value.Minutes)</MudTd>
        <MudTd DataLabel="Typ">@context.Type</MudTd>
        <MudTd DataLabel="Att göra">@context.ToDo</MudTd>
        @if (!context.IsDone)
        {
            <MudTd DataLabel="Status">Inte klart</MudTd>
            <MudTd>
                <MudIconButton Color="Color.Success" OnClick="@(e => UpdateStatus(context, true))" Icon="@Icons.Custom.Uncategorized.AlertSuccess" />
            </MudTd>
        }
        else
        {
            <MudTd DataLabel="Status">Klart!</MudTd>
            <MudTd>
                <MudIconButton Color="Color.Warning" OnClick="@(e => UpdateStatus(context, false))" Icon="@Icons.Material.Filled.Redo" />
            </MudTd>
        }
    </RowTemplate>
</MudTable>

@code {
    public MudTable<Event> table;

    // LOAD DATA FROM DATABASE
    private async Task<TableData<Event>> ServerReload(TableState state)
    {
        var results = await _context.Events.Where(y => y.Datum.Value.Day == DateTime.Now.Day).OrderByDescending(x => x.Datum).ToListAsync();
        StateHasChanged();
        return new TableData<Event>() { Items = results };
    }

    private async Task UpdateStatus(Event ev, bool b)
    {
        ev.IsDone = b;

        _context.Events.Update(ev);
        await _context.SaveChangesAsync();
        StateHasChanged();
    }
}
