@inject school.Data.ApplicationDbContext _context
@inject IJSRuntime _jsRuntime

@if (table == null)
{
<MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
}
<MudTable ServerData="@(new Func<TableState, Task<TableData<Tenta>>>(ServerReload))" @ref="table" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Datum</MudTh>
        <MudTh>Examinator</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Datum">@context.Datum.Value.ToShortDateString()</MudTd>
        <MudTd DataLabel="Examinator">@context.Examinator</MudTd>
        <MudTd>
            <MudIconButton OnClick="@(e => GetBytesFromPDF(context, true))" Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Secondary" />
            <MudIconButton OnClick="@(e => NewTabPdf(context))" Target="top" Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Secondary" />
        </MudTd>
        <AuthorizeView Roles="Admin" Context="table">
            <Authorized>
                <MudTd>
                    <MudIconButton OnClick="@(e => ToggleDeleteBox(context))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                </MudTd>
            </Authorized>
            <NotAuthorized>
                <MudTd>
                </MudTd>
            </NotAuthorized>
        </AuthorizeView>
    </RowTemplate>
</MudTable>

@* DELETE PROMPT *@
<MudMessageBox @ref="mbox" Title="Warning" CancelText="Avbryt">
    <MessageContent>
        Är du säker?
    </MessageContent>
    <YesButton>
        <MudButton OnClick="Delete" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Ja, Ta bort!</MudButton>
    </YesButton>
</MudMessageBox>

@* PDF *@
<MudOverlay ZIndex="9999" Style="padding-top: 355px; padding-right: 35px" Visible="isVisiblePdf" DarkBackground="true" Absolute="true">
    <NoJS.PDFViewer.PDFViewer Document="@Pdf"
                              DocumentHeight="940px"
                              DocumentName="@Pdfpath"
                              DocumentWidth="1500px" />
    <MudFab Style="position: fixed; right: 3px; top: 60px" OnClick="@(e => ToggleOverlayPdf(false))" Color="Color.Error" Icon="@Icons.Material.Filled.Close" />
</MudOverlay>


@code {
    public MudTable<Tenta> table;

    [Parameter]
    public string Pdfpath { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public string Kurs { get; set; }

    public byte[] Pdf { get; set; }

    public bool isVisiblePdf;

    private MudMessageBox mbox { get; set; }

    private Tenta CurrentTenta { get; set; }

    private string state = "Message box hasn't been opened yet";

    // LOAD DATA FROM DATABASE
    private async Task<TableData<Tenta>> ServerReload(TableState state)
    {
        var results = await _context.Tentamen.Where(x => x.Kursnamn == "ID1019").OrderByDescending(x => x.Datum).ToListAsync();
        StateHasChanged();
        return new TableData<Tenta>() { Items = results };
    }

    // DELETE EXAM
    private async Task Delete()
    {
        _context.Tentamen.Remove(CurrentTenta);
        await _context.SaveChangesAsync();

        await table.ReloadServerData();
        Snackbar.Add("Deleted", Severity.Normal);
    }

    // LOAD PDF
    private void GetBytesFromPDF(Tenta tenta, bool toggle)
    {
        Pdf = Convert.FromBase64String(tenta.Data);
        if (toggle)
            ToggleOverlayPdf(toggle);
    }

    // OPEN PDF
    private void ToggleOverlayPdf(bool toggle)
    {
        isVisiblePdf = toggle;
        StateHasChanged();
    }

    // OPEN DELETE PROMPT
    private async void ToggleDeleteBox(Tenta tenta)
    {
        CurrentTenta = tenta;
        bool? result = await mbox.Show();
        state = result == null ? "Cancelled" : "Deleted!";
        StateHasChanged();
    }

    protected async Task NewTabPdf(Tenta tenta)
    {
        Id = tenta.Id;
        Type = "tenta";

        string datum = tenta.Datum.Value.ToShortDateString();
        datum = datum.Replace("/", "");
        Pdfpath = datum + tenta.Examinator;

        Kurs = "ID1019";

        OnParametersSet();
        await _jsRuntime.InvokeVoidAsync("blazorOpen", new object[2] { $"/{Kurs}/{Type}/{Pdfpath}/{Id}", "_blank" });
    }
}


