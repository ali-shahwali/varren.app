@using Microsoft.EntityFrameworkCore
@inject school.Data.ApplicationDbContext _context

<MudTable ServerData="@(new Func<TableState, Task<TableData<Övning>>>(ServerReload))" @ref="table" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Ämne</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Ämne">@context.Ämne</MudTd>
        <MudTd>
            <MudIconButton OnClick="@(e => GetBytesFromPDF(context, true))" Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Secondary" />
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" OnClick="@(e => OnButtonClicked(context))"/>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudMessageBox @ref="mbox" Title="Warning" CancelText="Avbryt">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton OnClick="Delete" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Ta bort!</MudButton>
    </YesButton>
</MudMessageBox>

<MudOverlay ZIndex="9999" Style="padding-top: 350px" Visible="isVisiblePdf" DarkBackground="true" Absolute="true">
    <NoJS.PDFViewer.PDFViewer Document="@pdf"
                              DocumentHeight="1000px"
                              DocumentName="@DocumentName()"
                              DocumentWidth="1500px" />
    <MudButton Style="padding-bottom: 50px" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="@(e => ToggleOverlayPdf(false))"> Stäng </MudButton>
</MudOverlay>

@code {

    public MudTable<Övning> table;

    public byte[] pdf { get; set; }

    public bool isVisiblePdf;

    MudMessageBox mbox { get; set; }

    Övning CurrentÖvning { get; set; }

    string state = "Message box hasn't been opened yet";

    private async Task<TableData<Övning>> ServerReload(TableState state)
    {
        var results = await _context.Övningar.Where(x => x.Kursnamn == "ID1019").ToListAsync();
        StateHasChanged();
        return new TableData<Övning>() { Items = results };
    }

    private async void Delete()
    {
        _context.Övningar.Remove(CurrentÖvning);
        _context.SaveChanges();

        await table.ReloadServerData();
        Snackbar.Add("Deleted", Severity.Normal);
    }

    public void GetBytesFromPDF(Övning övning, bool toggle)
    {
        _context.Övningar.Where(x => x.Id == övning.Id).FirstOrDefault();
        pdf = Convert.FromBase64String(övning.Data);
        ToggleOverlayPdf(toggle);
    }

    public void ToggleOverlayPdf(bool toggle)
    {
        isVisiblePdf = toggle;
        StateHasChanged();
    }

    private async void OnButtonClicked(Övning övning)
    {
        CurrentÖvning = övning;
        bool? result = await mbox.Show();
        state = result == null ? "Cancelled" : "Deleted!";
        StateHasChanged();
    }

    public string DocumentName()
    {
        return "tenta.pdf";
    }

}

