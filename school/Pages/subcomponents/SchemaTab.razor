@inject school.Data.ApplicationDbContext _context

@if (activities == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}

<MudContainer Class="mt-5" Fixed="true">
    <MudExpansionPanels MultiExpansion="true">
        @foreach (var item in Weeks)
        {
            var str = $"Vecka {item.ToString()}"; 
            <MudExpansionPanel Text="@str">
                <MudSimpleTable Elevation="4" Outlined="true" Hover="true">
                    <thead>
                        <tr>
                            <th>Datum</th>
                            <th>Tid</th>
                            <th>Att göra</th>
                            <th>Status</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var act in GetByWeek(item))
                        {
                        <tr>
                            <td>@act.Datum.Value.ToShortDateString()</td>
                            <td>@string.Format("{0:00}:{1:00}", act.Time.Value.Hours, act.Time.Value.Minutes)</td>
                            <td>@act.ToDo</td>
                            @if (!act.IsDone)
                            {
                                <td>Inte klart</td>
                                <td style="text-align: right">
                                    <MudIconButton Color="Color.Success" OnClick="@(e => UpdateStatus(act, true))" Icon="@Icons.Custom.Uncategorized.AlertSuccess" />
                                </td>
                            }
                            else
                            {
                                <td>Klart</td>
                                <td style="text-align: right">
                                    <MudIconButton  Color="Color.Warning" OnClick="@(e => UpdateStatus(act, false))" Icon="@Icons.Material.Filled.Redo"/>
                                </td>
                            }
                            <td>
                                <MudIconButton Color="Color.Error" OnClick="@(e => Remove(act))" Icon="@Icons.Material.Filled.Close" />
                            </td>
                        </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudContainer>



@code {
    public List<Activity> activities { get; set; } = new List<Activity>();

    public List<int> Weeks { get; set; } = new List<int>();

    // LOAD DATA FROM DATABASE
    protected override async Task OnInitializedAsync()
    {
        activities = await _context.Activities.OrderBy(x => x.Week).ToListAsync();
        foreach (var item in activities)
        {
            if(!Weeks.Contains(item.Week))
                Weeks.Add(item.Week);
        }
    }

    private List<Activity> GetByWeek(int week)
    {
        return _context.Activities.Where(x => x.Week == week).OrderBy(x => x.Datum).ToList();
    }

    private void UpdateStatus(Activity act, bool b)
    {
        act.IsDone = b;

        _context.Activities.Update(act);
        _context.SaveChanges();
        StateHasChanged();
    }

    
    private void Remove(Activity act)
    {
        _context.Activities.Remove(act);
        _context.SaveChanges();
        StateHasChanged();
    }
}
