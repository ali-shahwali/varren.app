@page "/skapa_kod"
@inject varren.Data.ApplicationDbContext _context
@inject IJSRuntime _jsRuntime

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Large">
    <EditForm Model="@kod" OnSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <MudGrid Spacing="6" Class="mt-16">
            <MudItem xs="3">
                <MudText Typo="Typo.h5" GutterBottom="true">Skapa kod</MudText>
                <MudGrid>
                    <MudItem xs="12">
                        <MudSelect T="string" @bind-Value="kod.Kursnamn" Label="Kursnamn" For="@(() => kod.Kursnamn)">
                            <MudSelectItem Value="@("ID1019")"> Programmering 2 </MudSelectItem>
                            <MudSelectItem Value="@("IK1203")"> Nätverk och Kommunikation </MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" Label="Skapare" @bind-Value="kod.Skapare" For="@(() => kod.Skapare)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" Label="Syfte" @bind-Value="kod.Syfte" For="@(() => kod.Syfte)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudAutocomplete MaxItems="@langs.Length" T="string" Label="Välj språk" @bind-Value="kod.Lang" SearchFunc="@Search" />
                    </MudItem>
                    
                    <MudItem Class="d-flex justify-end" xs="6">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Skapa</MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="9">
                <MudText>@kod.Lang</MudText>
                <MudItem xs="12">
                    <div id="editor"></div>
                </MudItem>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudContainer>




@code {

    Kod kod = new Kod();

    string codeData;

    private string[] langs =
{
        "Java", "JavaScript", "Python", "C", "C++", "C#", "Elixir", "Erlang", "PHP", "R", "Rust",
        "Ruby", "Haskell", "Fortran", "F#", "Scala", "Go", "Swift", "MATLAB", "Perl", "Julia",
        "Assembly", "Pascal", "Prolog"
    };

    private async Task<IEnumerable<string>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return langs;
        return langs.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // on valid submit method
    public async Task OnSubmit(EditContext context)
    {
        kod.Data = await _jsRuntime.InvokeAsync<string>("getEditorData");

        // build data object
        kod = new Kod()
        {
            Kursnamn = kod.Kursnamn,
            Skapare = kod.Skapare,
            Lang = kod.Lang,
            Syfte = kod.Syfte,
            Data = kod.Data,
        };

        // this is where we will save to the database
        _context.Code.Add(kod);
        _context.SaveChanges();

        StateHasChanged();
        Snackbar.Add("Fil skapad", Severity.Normal);
        NavigationManager.NavigateTo($"/{kod.Kursnamn}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("renderEditor");
    }

}



